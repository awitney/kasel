
# Python dependecies pre-load
import  os
import  sys
import  re
import  pathlib
import  pandas as pd
from    os.path import join as join
from    snakemake.utils import validate, min_version

configfile: 'kasel-config.yml'

#print("LOCAL CONFIG", config)

GENOMES    = 'genomes'
DATA       = 'data'

OUTPUT     = config['output']
DATASET    = config['dataset']

ALIGNMENTS = join(OUTPUT, DATASET, 'alignments')
VCF        = join(OUTPUT, DATASET, 'vcf')
RESULTS    = join(OUTPUT, DATASET, 'results')
CALLERS    = join(OUTPUT, DATASET, 'callers')
KRAKEN     = join(OUTPUT, DATASET, 'kraken')
LOGS       = join(OUTPUT, DATASET, 'logs')
VERSIONS   = join(OUTPUT, DATASET, 'versions')
TMP        = join(OUTPUT, DATASET, 'tmp')

KRAKENDB = config['krakendb']

# set a directory prefix for legacy version samtools
#DATASET_LEGACY = DATASET + '-' + LEGACY
LEGACY     = 'legacy'

# Create temp directory
pathlib.Path(TMP).mkdir(parents=True, exist_ok=True) 
pathlib.Path(TMP + '/' + LEGACY).mkdir(parents=True, exist_ok=True) 

REF = 'NC_000962'

DRUGS = ['PTM', 'BDQ']

samples_file = config['samples_file']

sampledata = pd.read_table(samples_file).set_index("sample", drop=False)
SAMPLES = sampledata['sample'].tolist()
READS1 = sampledata['forward'].tolist()
	
# define format of ref
wildcard_constraints:
	ref="NC_\d+",
	drug="[a-zA-Z]{3}",
	DATASET="^((?!\/)*$)"

# function to load read files within rules
def get_seq(wildcards, reads):
#	print(wildcards)
	return sampledata.loc[(wildcards.sample), [reads]].dropna().iloc[0]

def fetch_legacy_files(nolegacy):

	files = []
	
	if nolegacy == False:
		files.append(expand(join(ALIGNMENTS, LEGACY, '{ref}_{sample}.bam'), ref=REF, sample=SAMPLES))
		files.append(expand(join(VCF, LEGACY, '{ref}_{sample}.all.vcf.gz'), ref=REF, sample=SAMPLES))
		files.append(expand(join(VCF, LEGACY, 'variants', '{ref}_{sample}.vcf.gz'), ref=REF, sample=SAMPLES))
		files.append(expand(join(VCF, LEGACY, 'variants', 'annotated', '{ref}_{sample}.ann.vcf.gz'), ref=REF, sample=SAMPLES))
		files.append(expand(join(VCF, LEGACY, 'variants', 'annotated', '{ref}_{sample}.tsv'), ref=REF, sample=SAMPLES))
		files.append(expand(join(RESULTS, LEGACY, 'variants', '{ref}_' + DATASET + '.tsv'), ref=REF))
		
		files.append(expand(join(VCF, LEGACY, 'variants', 'annotated', 'resistance', '{ref}_{drug}_{sample}.tsv'), ref=REF, sample=SAMPLES, drug=DRUGS))
		files.append(expand(join(RESULTS, LEGACY, 'variants', 'resistance', '{ref}_' + DATASET + '_{drug}.tsv'), ref=REF, drug=DRUGS))
		files.append(expand(join(RESULTS, LEGACY, 'variants', 'resistance', '{ref}_' + DATASET + '.tsv'), ref=REF))
	
	return files

def fetch_caller_files(nocallers):

	files = []
	
	if nocallers == False:
		files.append(expand(join(CALLERS, 'TB-profiler', '{sample}', 'results', '{sample}.results.txt'), sample=SAMPLES))
		files.append(join(CALLERS, 'TB-profiler', 'tbprofiler.txt'))
		files.append(expand(join(CALLERS, 'mykrobe', '{sample}.results.csv'), sample=SAMPLES))
	
	return files
	
def fetch_fastlin_files(datadir):

	files = []
	
	if datadir != False:
		files.append(join(RESULTS, 'fastlin.txt'))
	
	return files

rule all:
	input:
		join(RESULTS, 'stats.txt'),
		#
		expand(join(ALIGNMENTS, '{ref}_{sample}.bam'), ref=REF, sample=SAMPLES),
		expand(join(VCF, '{ref}_{sample}.all.vcf.gz'), ref=REF, sample=SAMPLES),
		expand(join(VCF, 'variants', '{ref}_{sample}.vcf.gz'), ref=REF, sample=SAMPLES),
		expand(join(VCF, 'variants', 'annotated', '{ref}_{sample}.ann.vcf.gz'), ref=REF, sample=SAMPLES),
		expand(join(VCF, 'variants', 'annotated', '{ref}_{sample}.tsv'), ref=REF, sample=SAMPLES),
		expand(join(RESULTS, 'variants', '{ref}_' + DATASET + '.tsv'), ref=REF),
		#
		# Drug specific SNPs
		#
		expand(join(VCF, 'variants', 'annotated', 'resistance', '{ref}_{drug}_{sample}.tsv'), ref=REF, sample=SAMPLES, drug=DRUGS),
		expand(join(RESULTS, 'variants', 'resistance', '{ref}_' + DATASET + '_{drug}.tsv'), ref=REF, drug=DRUGS),
		expand(join(RESULTS, 'variants', 'resistance', '{ref}_' + DATASET + '.tsv'), ref=REF),
		#
		# External callers
		#
		fetch_caller_files(config['nocallers']),
		#
#		join(CALLERS, 'MTBSeq', 'Classification', 'Strain_Classification.tab'),
		#	
		# for legacy version samtools/bcftools
		#
		fetch_legacy_files(config['nolegacy']),
		#
		# fastlin
		#
		fetch_fastlin_files(config['fastlin']),
		#
		# Drug specific SNPs
		#
		join(RESULTS, 'gene-snps-all.tsv'),
		join(RESULTS, 'gene-snps-PTM.txt'),
		join(RESULTS, 'gene-snps-BDQ.txt'),
		#
		# Kraken
		expand(join(KRAKEN, '{sample}.report.txt'), sample=SAMPLES),
		#
		# Versions
		#
#		join(VERSIONS, 'alignment.txt'),

include: join('rules', "bwa.smk")
include: join('rules', "bwa-legacy.smk")
include: join('rules', "tb-profiler.smk")
include: join('rules', "mtbseq.smk")
include: join('rules', "mykrobe.smk")
include: join('rules', "kraken.smk")
include: join('rules', "fastlin.smk")
