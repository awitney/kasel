
# Python dependecies pre-load
import  os
import  sys
import  re
import  pathlib
import  pandas as pd
from    os.path import join as join
from    snakemake.utils import validate, min_version

configfile: 'kasel-config.yml'

#print("LOCAL CONFIG", config)

GENOMES    = 'genomes'
DATA       = 'data'

OUTPUT     = config['output']

ALIGNMENTS = join(OUTPUT, 'alignments')
VCF        = join(OUTPUT, 'vcf')
RESULTS    = join(OUTPUT, 'results')
CALLERS    = join(OUTPUT, 'callers')
LOGS       = join(OUTPUT, 'logs')
VERSIONS   = join(OUTPUT, 'versions')
TMP        = join(OUTPUT, 'tmp')

# set a directory prefix for legacy version samtools
#DATASET_LEGACY = DATASET + '-' + LEGACY
LEGACY     = '0.1.20'

# Create temp directory
pathlib.Path(TMP).mkdir(parents=True, exist_ok=True) 
pathlib.Path(TMP + '/' + LEGACY).mkdir(parents=True, exist_ok=True) 

REF = 'NC_000962'

DRUGS = ['PTM', 'BDQ']

DATASET = config['dataset']
samples_file = config['samples_file']


sampledata = pd.read_table(samples_file).set_index("sample", drop=False)
SAMPLES = sampledata['sample'].tolist()
READS1 = sampledata['forward'].tolist()
	
# define format of ref
wildcard_constraints:
	ref="NC_\d+",
	drug="[a-zA-Z]{3}",
	DATASET="^((?!\/)*$)"

# function to load read files within rules
def get_seq(wildcards, reads):
#	print(wildcards)
	return sampledata.loc[(wildcards.sample), [reads]].dropna()[0]

def fetch_legacy_files(nolegacy):

	files = []
	
	if nolegacy == False:
		files.append(expand(join(ALIGNMENTS, DATASET, LEGACY, '{ref}_{sample}.bam'), ref=REF, sample=SAMPLES))
		files.append(expand(join(VCF, DATASET, LEGACY, '{ref}_{sample}.all.vcf.gz'), ref=REF, sample=SAMPLES))
		files.append(expand(join(VCF, DATASET, LEGACY, 'variants', '{ref}_{sample}.vcf.gz'), ref=REF, sample=SAMPLES))
		files.append(expand(join(VCF, DATASET, LEGACY, 'variants', 'annotated', '{ref}_{sample}.ann.vcf.gz'), ref=REF, sample=SAMPLES))
		files.append(expand(join(VCF, DATASET, LEGACY, 'variants', 'annotated', '{ref}_{sample}.tsv'), ref=REF, sample=SAMPLES))
		files.append(expand(join(RESULTS, DATASET, LEGACY, 'variants', '{ref}_' + DATASET + '.tsv'), ref=REF))
		
		files.append(expand(join(VCF, DATASET, LEGACY, 'variants', 'annotated', 'resistance', '{ref}_{drug}_{sample}.tsv'), ref=REF, sample=SAMPLES, drug=DRUGS))
		files.append(expand(join(RESULTS, DATASET, LEGACY, 'variants', 'resistance', '{ref}_' + DATASET + '_{drug}.tsv'), ref=REF, drug=DRUGS))
		files.append(expand(join(RESULTS, DATASET, LEGACY, 'variants', 'resistance', '{ref}_' + DATASET + '.tsv'), ref=REF))
	
	return files

rule all:
	input:
#		join(RESULTS, DATASET, 'stats.coverage.' + REF + '.txt'),
		join(RESULTS, DATASET, 'stats.txt'),
		#
		expand(join(ALIGNMENTS, DATASET, '{ref}_{sample}.bam'), ref=REF, sample=SAMPLES),
		expand(join(VCF, DATASET, '{ref}_{sample}.all.vcf.gz'), ref=REF, sample=SAMPLES),
		expand(join(VCF, DATASET, 'variants', '{ref}_{sample}.vcf.gz'), ref=REF, sample=SAMPLES),
		expand(join(VCF, DATASET, 'variants', 'annotated', '{ref}_{sample}.ann.vcf.gz'), ref=REF, sample=SAMPLES),
		expand(join(VCF, DATASET, 'variants', 'annotated', '{ref}_{sample}.tsv'), ref=REF, sample=SAMPLES),
		expand(join(RESULTS, DATASET, 'variants', '{ref}_' + DATASET + '.tsv'), ref=REF),
		#
		# Drug specific SNPs
		#
		expand(join(VCF, DATASET, 'variants', 'annotated', 'resistance', '{ref}_{drug}_{sample}.tsv'), ref=REF, sample=SAMPLES, drug=DRUGS),
		expand(join(RESULTS, DATASET, 'variants', 'resistance', '{ref}_' + DATASET + '_{drug}.tsv'), ref=REF, drug=DRUGS),
		expand(join(RESULTS, DATASET, 'variants', 'resistance', '{ref}_' + DATASET + '.tsv'), ref=REF),
		#
		# External callers
		#
		expand(join(CALLERS, DATASET, 'TB-profiler', 'results', '{sample}.results.txt'), sample=SAMPLES),
		join(CALLERS, DATASET, 'TB-profiler', 'tbprofiler.txt'),
		expand(join(CALLERS, DATASET, 'mykrobe', '{sample}.results.csv'), sample=SAMPLES),
		#
#		join(CALLERS, DATASET, 'MTBSeq', 'Classification', 'Strain_Classification.tab'),
		#	
		# for legacy version samtools/bcftools
		#
		fetch_legacy_files(config['nolegacy']),
		#
		# Drug specific SNPs
		#
		join(RESULTS, DATASET, 'gene-snps-all.tsv'),
		join(RESULTS, DATASET, 'gene-snps-PTM.txt'),
		join(RESULTS, DATASET, 'gene-snps-BDQ.txt'),
		#
		# Versions
		#
#		join(VERSIONS, DATASET, 'alignment.txt'),

include: join('rules', "bwa.smk")
include: join('rules', "bwa-0.1.20.smk")
include: join('rules', "tb-profiler.smk")
include: join('rules', "mtbseq.smk")
include: join('rules', "mykrobe.smk")
